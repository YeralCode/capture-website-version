import { ScreenshotService } from './src/services/screenshotService.js';
import { IntegratedScrapingService } from './src/services/integratedScrapingService.js';

console.log('üîê PRUEBA: Validaci√≥n de autenticaci√≥n requerida');

async function probarValidacionAutenticacion() {
  try {
    console.log('\nüß™ CASO 1: URLs mixtas CON autenticaci√≥n correcta');
    await probarCasoExitoso();
    
    console.log('\nüß™ CASO 2: URLs de Facebook/Instagram SIN autenticaci√≥n');
    await probarCasoFallido();
    
    console.log('\nüß™ CASO 3: Solo URLs normales (sin Facebook/Instagram)');
    await probarCasoSinAutenticacion();
    
  } catch (error) {
    console.error(`‚ùå Error en prueba: ${error.message}`);
  }
}

async function probarCasoExitoso() {
  console.log('\nüìã URLs con Facebook e Instagram + Autenticaci√≥n correcta');
  
  const service = new ScreenshotService({
    directorioSalida: './screenshots',
    usarNavegadorReal: false, // M√°s r√°pido para prueba
    timeout: 10
  });
  
  const integratedService = new IntegratedScrapingService();
  integratedService.screenshotService = service;
  
  try {
    // Simular autenticaci√≥n exitosa
    service.loginRealizado = {
      facebook: true,
      instagram: true
    };
    
    const urlsPrueba = [
      'https://www.facebook.com/cristiano',
      'https://www.instagram.com/leomessi/',
      'https://www.google.com'
    ];
    
    console.log('üîê Estado de autenticaci√≥n simulado:');
    console.log(`  ‚úÖ Facebook: ${service.loginRealizado.facebook}`);
    console.log(`  ‚úÖ Instagram: ${service.loginRealizado.instagram}`);
    
    // Esto deber√≠a pasar sin errores
    const urlsInstagram = urlsPrueba.filter(url => url.includes('instagram.com'));
    const urlsFacebook = urlsPrueba.filter(url => url.includes('facebook.com'));
    
    await integratedService.validarAutenticacionRequerida(urlsFacebook, urlsInstagram);
    
    console.log('‚úÖ CASO 1 EXITOSO: Validaci√≥n pas√≥ correctamente');
    
  } catch (error) {
    console.log(`‚ùå CASO 1 FALL√ì: ${error.message}`);
  }
}

async function probarCasoFallido() {
  console.log('\nüìã URLs con Facebook e Instagram + SIN autenticaci√≥n');
  
  const service = new ScreenshotService({
    directorioSalida: './screenshots',
    timeout: 10
  });
  
  const integratedService = new IntegratedScrapingService();
  integratedService.screenshotService = service;
  
  try {
    // Simular autenticaci√≥n fallida
    service.loginRealizado = {
      facebook: false,
      instagram: false
    };
    
    const urlsPrueba = [
      'https://www.facebook.com/cristiano',
      'https://www.instagram.com/leomessi/'
    ];
    
    console.log('üîê Estado de autenticaci√≥n simulado:');
    console.log(`  ‚ùå Facebook: ${service.loginRealizado.facebook}`);
    console.log(`  ‚ùå Instagram: ${service.loginRealizado.instagram}`);
    
    const urlsInstagram = urlsPrueba.filter(url => url.includes('instagram.com'));
    const urlsFacebook = urlsPrueba.filter(url => url.includes('facebook.com'));
    
    // Esto deber√≠a lanzar error y parar la ejecuci√≥n
    await integratedService.validarAutenticacionRequerida(urlsFacebook, urlsInstagram);
    
    console.log('‚ùå CASO 2 FALL√ì: Deber√≠a haber lanzado error');
    
  } catch (error) {
    console.log('‚úÖ CASO 2 EXITOSO: Error esperado capturado correctamente');
    console.log(`üìÑ Mensaje: ${error.message}`);
  }
}

async function probarCasoSinAutenticacion() {
  console.log('\nüìã Solo URLs normales (sin Facebook/Instagram)');
  
  const service = new ScreenshotService({
    directorioSalida: './screenshots',
    timeout: 10
  });
  
  const integratedService = new IntegratedScrapingService();
  integratedService.screenshotService = service;
  
  try {
    // No importa el estado de autenticaci√≥n
    service.loginRealizado = {
      facebook: false,
      instagram: false
    };
    
    const urlsPrueba = [
      'https://www.google.com',
      'https://github.com',
      'https://stackoverflow.com'
    ];
    
    console.log('üåê Solo URLs normales, autenticaci√≥n no requerida');
    
    const urlsInstagram = urlsPrueba.filter(url => url.includes('instagram.com'));
    const urlsFacebook = urlsPrueba.filter(url => url.includes('facebook.com'));
    
    // Esto deber√≠a pasar sin problemas
    await integratedService.validarAutenticacionRequerida(urlsFacebook, urlsInstagram);
    
    console.log('‚úÖ CASO 3 EXITOSO: URLs normales procesadas sin requerir autenticaci√≥n');
    
  } catch (error) {
    console.log(`‚ùå CASO 3 FALL√ì: ${error.message}`);
  }
}

console.log('\nüìã RESUMEN DE LA PRUEBA:');
console.log('1. ‚úÖ URLs con FB/IG + Autenticaci√≥n correcta ‚Üí Contin√∫a');
console.log('2. ‚ùå URLs con FB/IG + Sin autenticaci√≥n ‚Üí Para ejecuci√≥n');
console.log('3. ‚úÖ Solo URLs normales ‚Üí Contin√∫a (sin validar FB/IG)');

// Ejecutar la prueba
probarValidacionAutenticacion(); 